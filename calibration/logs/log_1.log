2021-02-26 23:10:25 DEBUG	calibrator.py:15 - Calibrator started running
2021-02-26 23:10:25 DEBUG	calibrator.py:30 - JSON input loaded
2021-02-26 23:10:25 INFO	calibrator.py:46 - Set loss function as FiloLengthsLoss
2021-02-26 23:10:25 INFO	calibrator.py:51 - Set optimizer lib as PymooOptimizer
2021-02-26 23:10:25 INFO	pymooOpt.py:36 - mask = ['real', 'int', 'int']
2021-02-26 23:10:25 INFO	pymooOpt.py:27 - Lower bounds = [0.1, 1, 500] | Upper bounds = [4, 3, 600]
2021-02-26 23:10:26 DEBUG	pymooOpt.py:46 - Algorithm obtained. Object = <pymoo.algorithms.nsga2.NSGA2 object at 0x7fd6c486a5b0>
2021-02-26 23:10:26 DEBUG	pymooOpt.py:112 - Defined problem class. Object = # name: MyProblem
# n_var: 3
# n_obj: 2
# n_constr: 0

2021-02-26 23:10:26 DEBUG	pymooOpt.py:115 - Calling minimize()
2021-02-26 23:13:52 DEBUG	lossFunction.py:41 - Ran agent successfully. Args=['1', '2', '500.0114374817345', '-1', '-1']
2021-02-26 23:13:52 DEBUG	lossFunction.py:74 - Loaded agent output from /Users/cherrylim/Code/spring-agent/filoLengthFiles/filo_lengths_filvary_1.72639_epsilon_0.9_VconcST0.04_GRADIENT2_FILTIPMAX15_tokenStrength1_FILSPACING2_actinMax500.011_randFilExtend-1_randFilRetract-1_run1_.txt
2021-02-26 23:13:53 DEBUG	filoLengthsLoss.py:55 - Got distributions for each objective
2021-02-26 23:13:53 DEBUG	filoLengthsLoss.py:228 - Loaded invivo csv
2021-02-26 23:13:53 DEBUG	filoLengthsLoss.py:228 - Loaded invivo csv
2021-02-26 23:13:53 DEBUG	filoLengthsLoss.py:228 - Loaded invivo csv
2021-02-26 23:13:53 DEBUG	filoLengthsLoss.py:228 - Loaded invivo csv
2021-02-26 23:13:53 ERROR	pymooOpt.py:125 - Failed to run minimize()
Traceback (most recent call last):
  File "/Users/cherrylim/Code/spring-agent/calibration/calibration/model/calibrate/optimizers/pymooOpt.py", line 117, in _minimize
    self.res = minimize(self.problem,
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/optimize.py", line 85, in minimize
    res = algorithm.solve()
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/algorithm.py", line 226, in solve
    self._solve(self.problem)
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/algorithm.py", line 321, in _solve
    self.next()
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/algorithm.py", line 243, in next
    self.initialize()
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/algorithm.py", line 215, in initialize
    self._initialize()
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/algorithms/genetic_algorithm.py", line 81, in _initialize
    self.evaluator.eval(self.problem, pop, algorithm=self)
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/evaluator.py", line 78, in eval
    self._eval(problem, pop[I], **kwargs)
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/evaluator.py", line 94, in _eval
    out = problem.evaluate(pop.get("X"),
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/problem.py", line 286, in evaluate
    out = self._evaluate_batch(X, calc_gradient, out, *args, **kwargs)
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/pymoo/model/problem.py", line 385, in _evaluate_batch
    self._evaluate(X, out, *args, **kwargs)
  File "/Users/cherrylim/Code/spring-agent/calibration/calibration/model/calibrate/optimizers/pymooOpt.py", line 104, in _evaluate
    losses = fn(solution)
  File "/Users/cherrylim/Code/spring-agent/calibration/calibration/model/calibrate/lossFunctions/filoLengthsLoss.py", line 29, in getLosses
    return self._getKsValues(featureDistributions)
  File "/Users/cherrylim/Code/spring-agent/calibration/calibration/model/calibrate/lossFunctions/filoLengthsLoss.py", line 63, in _getKsValues
    ksTimeAtMax = stats.ks_2samp(distributions["timeAtMax"], iv["timeAtMax"])
  File "/Users/cherrylim/Code/spring-agent/env/lib/python3.8/site-packages/scipy/stats/stats.py", line 6829, in ks_2samp
    data_all = np.concatenate([data1, data2])
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 1 dimension(s) and the array at index 1 has 2 dimension(s)

